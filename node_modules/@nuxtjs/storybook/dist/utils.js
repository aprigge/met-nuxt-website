"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requireTsNodeOrFail = exports.ensureCoreJs3 = exports.compileTemplate = exports.normalizeFlags = exports.requireMaybeEdge = exports.tryRequire = exports.loadFile = exports.logger = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const template_1 = __importDefault(require("lodash/template"));
const jiti_1 = __importDefault(require("jiti"));
const consola_1 = __importDefault(require("consola"));
const create_require_1 = __importDefault(require("create-require"));
exports.logger = consola_1.default.withScope('@nuxt/storybook');
function loadFile(rootDir, file) {
    return jiti_1.default(rootDir)(file) || {};
}
exports.loadFile = loadFile;
function tryRequire(pkg) {
    try {
        return require(pkg);
    }
    catch (_e) { }
}
exports.tryRequire = tryRequire;
function requireMaybeEdge(pkg) {
    return tryRequire(pkg + '-edge') || tryRequire(pkg);
}
exports.requireMaybeEdge = requireMaybeEdge;
function normalizeFlags(flags) {
    return Object.keys(flags).reduce((acc, flag) => {
        const normalizedFlag = flag
            .replace('--', '')
            .replace(/-([a-z])/, v => v.replace('-', '').toUpperCase());
        acc[normalizedFlag] = flags[flag];
        return acc;
    }, {});
}
exports.normalizeFlags = normalizeFlags;
function compileTemplate(src, destination, templateVars) {
    return __awaiter(this, void 0, void 0, function* () {
        let content;
        try {
            const fileContent = yield fs_extra_1.default.readFile(src, 'utf8');
            const templateFunction = template_1.default(fileContent);
            content = templateFunction({
                options: templateVars
            });
        }
        catch (err) {
            throw new Error(`Could not compile template: ${err.message}`);
        }
        yield fs_extra_1.default.outputFile(destination, content, 'utf8');
    });
}
exports.compileTemplate = compileTemplate;
function ensureCoreJs3(rootDir) {
    const corejsVersion = Number.parseInt(create_require_1.default(rootDir)('core-js/package.json').version.split('.')[0]);
    if (corejsVersion < 3) {
        let nuxtVersion = '';
        try {
            nuxtVersion = (create_require_1.default(rootDir)('nuxt/package.json').version);
        }
        catch (_a) { }
        try {
            nuxtVersion = (create_require_1.default(rootDir)('nuxt-edge/package.json').version);
        }
        catch (_b) { }
        if (nuxtVersion.startsWith('2.14')) {
            exports.logger.error('Storybook requires `core-js@3`. Run `yarn add --dev core-js@3 @babel/runtime-corejs3`');
        }
        else {
            exports.logger.error('Storybook requires `core-js@3`. See https://github.com/nuxt/nuxt.js/tree/v2.13.3/packages/babel-preset-app#example-2-use-core-js3');
        }
        process.exit(1);
    }
}
exports.ensureCoreJs3 = ensureCoreJs3;
function requireTsNodeOrFail() {
    const tsNode = tryRequire('ts-node');
    if (!tsNode) {
        exports.logger.error('Using Storybook within a Typescript project requires installing `ts-node`. Run `yarn add --dev ts-node`');
        process.exit(1);
    }
    return tsNode;
}
exports.requireTsNodeOrFail = requireTsNodeOrFail;
