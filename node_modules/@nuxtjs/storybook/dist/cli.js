"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.usage = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const arg_1 = __importDefault(require("arg"));
const utils_1 = require("./utils");
const index_1 = require("./index");
exports.usage = 'nuxt storybook [`dev`|`build`] [`dir`]';
function _run() {
    const args = arg_1.default({
        // Specify Nuxt config file
        '--config-file': String,
        '-c': '--config-file',
        '--static-dir': String,
        '-s': '--static-dir',
        '--output-dir': String,
        '-o': '--output-dir',
        '--quiet': Boolean,
        '--smoke-test': Boolean,
        '--ci': Boolean,
        '--port': Number,
        '-p': '--port',
        '--host': String,
        '-h': '--host',
        '--force': Boolean,
        '--tsconfig': String
    });
    const { _ } = args, flags = __rest(args, ["_"]);
    let [mode, _dir] = _;
    if (!_dir && fs_1.default.existsSync(mode)) {
        _dir = mode || '.';
        mode = 'dev';
    }
    else {
        _dir = _dir || '.';
        mode = mode || 'dev';
    }
    // Resolve dir
    const rootDir = path_1.default.resolve(process.cwd(), _dir);
    switch (mode) {
        case 'build':
            return index_1.build(Object.assign({ rootDir,
                mode }, utils_1.normalizeFlags(flags)));
        case 'eject':
            return index_1.eject(Object.assign({ rootDir, mode: 'dev' }, utils_1.normalizeFlags(flags)));
        case 'dev':
            // Make sure NODE_ENV is `development`.
            // NOTE: While using `nuxt` to execute commands, Nuxt set NODE_ENV to `production` if it is missing.
            // https://github.com/nuxt/nuxt.js/blob/dev/packages/cli/src/setup.js#L9
            process.env.NODE_ENV = 'development';
            return index_1.start(Object.assign({ rootDir,
                mode }, utils_1.normalizeFlags(flags)));
        default:
            utils_1.logger.error(`Command "${mode}" not found`);
    }
}
function run() {
    try {
        _run();
    }
    catch (err) {
        utils_1.logger.fatal(err);
        process.exit(1);
    }
}
exports.run = run;
if (!module.parent) {
    run();
}
